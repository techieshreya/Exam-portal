# Admin API Documentation

## Authentication

### Register Admin
POST /api/admin/register
Request:
```json
{
  "email": "admin@example.com",
  "password": "password123",
  "name": "Admin Name"
}
```
Response:
```json
{
  "data": {
    "admin": {
      "id": "uuid",
      "email": "admin@example.com",
      "name": "Admin Name"
    },
    "token": "jwt_token"
  }
}
```

### Login
POST /api/admin/login
Request:
```json
{
  "email": "admin@example.com",
  "password": "password123"
}
```
Response:
```json
{
  "data": {
    "admin": {
      "id": "uuid",
      "email": "admin@example.com",
      "name": "Admin Name"
    },
    "token": "jwt_token"
  }
}
```

## Exam Management

### List All Exams
GET /api/admin/exams
Response:
```json
{
  "data": [
    {
      "id": "uuid",
      "title": "Example Exam",
      "description": "Exam description",
      "duration": 60,
      "startTime": "2024-04-07T14:00:00Z",
      "endTime": "2024-04-07T15:00:00Z",
      "createdAt": "2024-04-07T13:00:00Z"
    }
  ]
}
```

### Create Exam
POST /api/admin/exams
Request:
```json
{
  "title": "Example Exam",
  "description": "Exam description",
  "duration": 60,
  "startTime": "2024-04-07T14:00:00Z",
  "endTime": "2024-04-07T15:00:00Z",
  "questions": [
    {
      "text": "Question text",
      "options": [
        {
          "text": "Option 1",
          "correct": true
        },
        {
          "text": "Option 2",
          "correct": false
        }
      ]
    }
  ]
}
```
Response:
```json
{
  "data": {
    "message": "Exam created successfully",
    "exam": {
      "id": "uuid",
      "title": "Example Exam",
      "description": "Exam description",
      "duration": 60,
      "startTime": "2024-04-07T14:00:00Z",
      "endTime": "2024-04-07T15:00:00Z",
      "createdAt": "2024-04-07T13:00:00Z"
    }
  }
}
```

### Get Exam Details
GET /api/admin/exams/:examId
Response:
```json
{
  "data": {
    "id": "uuid",
    "title": "Example Exam",
    "description": "Exam description",
    "duration": 60,
    "startTime": "2024-04-07T14:00:00Z",
    "endTime": "2024-04-07T15:00:00Z",
    "createdAt": "2024-04-07T13:00:00Z",
    "questions": [
      {
        "id": "uuid",
        "text": "Question text",
        "options": [
          {
            "id": "uuid",
            "text": "Option 1",
            "correct": true
          },
          {
            "id": "uuid",
            "text": "Option 2",
            "correct": false
          }
        ]
      }
    ]
  }
}
```

### Get Exam Results
GET /api/admin/exams/:examId/results
Response:
```json
{
  "data": [
    {
      "sessionId": "uuid",
      "startTime": "2024-04-07T14:00:00Z",
      "endTime": "2024-04-07T14:30:00Z",
      "completed": true,
      "userId": "uuid",
      "userEmail": "user@example.com",
      "username": "User Name",
      "score": 80,
      "totalQuestions": 10,
      "answers": [
        {
          "questionId": "uuid",
          "selectedOptionId": "uuid",
          "selectedOptionText": "Selected answer",
          "isCorrect": true
        }
      ]
    }
  ]
}
```

### Get Specific Student Exam Result
GET /api/admin/exams/:examId/results/:userId
Response (Success - Completed Session):
```json
{
  "data": {
    "sessionId": "uuid",
    "startTime": "2024-04-08T10:00:00Z",
    "endTime": "2024-04-08T10:45:12Z",
    "completed": true,
    "userId": "user-uuid",
    "userEmail": "student@example.com",
    "username": "Student Name",
    "score": 80.00,
    "totalQuestions": 5,
    "correctAnswers": 4,
    "answers": [
      {
        "questionId": "q-uuid-1",
        "questionText": "What is 2+2?",
        "selectedOptionId": "opt-uuid-1a",
        "selectedOptionText": "4",
        "correctOptionId": "opt-uuid-1a",
        "correctOptionText": "4",
        "isCorrect": true
      },
      {
        "questionId": "q-uuid-2",
        "questionText": "Capital of France?",
        "selectedOptionId": "opt-uuid-2b",
        "selectedOptionText": "London",
        "correctOptionId": "opt-uuid-2a",
        "correctOptionText": "Paris",
        "isCorrect": false
      }
      // ... more answers
    ]
  }
}
```
Response (Success - Incomplete Session):
```json
{
  "data": {
    "sessionId": "uuid",
    "startTime": "2024-04-08T11:00:00Z",
    "endTime": null,
    "completed": false,
    "userId": "user-uuid-2",
    "userEmail": "another@example.com",
    "username": "Another Student",
    "score": null,
    "totalQuestions": null,
    "answers": [],
    "message": "Exam session not completed."
  }
}
```
Response (Error - Not Found):
```json
{
  "error": {
    "code": "NOT_FOUND",
    "message": "No exam session found for this user and exam."
  }
}
```


### Delete Exam
DELETE /api/admin/exams/:examId
Response:
```json
{
  "data": {
    "message": "Exam deleted successfully"
  }
}
```

## User Management

### List All Users
GET /api/admin/users
Response:
```json
{
  "data": [
    {
      "id": "uuid",
      "email": "user@example.com",
      "username": "User Name",
      "createdAt": "2024-04-07T13:00:00Z"
    }
  ]
}
```

### Bulk Create Users
POST /api/admin/users/bulk
Request:
```json
{
  "users": [
    {
      "email": "student1@example.com",
      "password": "password123",
      "username": "Student One"
    },
    {
      "email": "student2@example.com",
      "password": "password456",
      "username": "Student Two"
    },
    {
      "email": "existing@example.com", // Example of an email that might already exist
      "password": "password789",
      "username": "Existing User"
    },
    { 
      "email": "student1@example.com", // Example of duplicate email within the request
      "password": "passwordabc",
      "username": "Duplicate Student"
    },
    { 
      "email": "invalid@example.com", // Example of missing field
      "username": "Invalid User"
    }
  ]
}
```
Response (Success):
```json
{
  "data": {
    "message": "Bulk user creation processed. 2 users created, 3 skipped.",
    "created": [
      {
        "id": "uuid-1",
        "email": "student1@example.com",
        "username": "Student One",
        "createdAt": "2024-04-08T12:00:00Z"
      },
      {
        "id": "uuid-2",
        "email": "student2@example.com",
        "username": "Student Two",
        "createdAt": "2024-04-08T12:00:00Z"
      }
    ],
    "skipped": [
      {
        "email": "existing@example.com",
        "reason": "Email already exists"
      },
      {
        "email": "student1@example.com",
        "reason": "Email already exists" 
      },
      {
        "email": "invalid@example.com",
        "reason": "Missing email, password, or username"
      }
    ]
  }
}
```
Response (Error - Invalid Input):
```json
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Request body must contain a non-empty \"users\" array."
  }
}

```

# Error Responses

All endpoints may return the following error responses:

### Validation Error
```json
{
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "Error message"
  }
}
```

### Authorization Error
```json
{
  "error": {
    "code": "AUTH_ERROR",
    "message": "Error message"
  }
}
```

### Not Found Error
```json
{
  "error": {
    "code": "NOT_FOUND",
    "message": "Error message"
  }
}
```

### Server Error
```json
{
  "error": {
    "code": "SERVER_ERROR",
    "message": "Error message"
  }
}
```

# Authentication

All admin endpoints (except login/register) require authentication via Bearer token:
```
Authorization: Bearer <jwt_token>
